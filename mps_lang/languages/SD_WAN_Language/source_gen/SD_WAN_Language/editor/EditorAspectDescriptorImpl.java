package SD_WAN_Language.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ACE_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AerialRefueling_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AirBase_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Bomber_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new CONUSNode_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new CommandCenter_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DistributedSystemsIntegrationLab_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Enterprise_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Fighter_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new FixedNode_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ForwardOperatingLocation_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new MobileNode_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new NationalTechnicalMeans_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new OconusNode_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new OperationsCenter_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Reconnaisance_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new RegionalESD_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new RegionalNOC_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new RegionalSOC_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new Rescue_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new SoftwareFactory_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new SpaceMissionSystem_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Spoke_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new Transport_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d627L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5e9L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d621L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5fbL), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5d1L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d619L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d607L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5a7L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5f5L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5ddL), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d633L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5adL), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d60dL), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5b9L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d613L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5e3L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5cbL), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5bfL), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5c5L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d601L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5d7L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5b3L), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d62dL), MetaIdFactory.conceptId(0x8d02133a4d7b453dL, 0xb122985d728f4dd6L, 0x352035af3170d5efL)).seal();
}
