package SD_WAN_Language.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ACE;
  private ConceptPresentation props_AerialRefueling;
  private ConceptPresentation props_AirBase;
  private ConceptPresentation props_Bomber;
  private ConceptPresentation props_CONUSNode;
  private ConceptPresentation props_CommandCenter;
  private ConceptPresentation props_DistributedSystemsIntegrationLab;
  private ConceptPresentation props_Enterprise;
  private ConceptPresentation props_Fighter;
  private ConceptPresentation props_FixedNode;
  private ConceptPresentation props_ForwardOperatingLocation;
  private ConceptPresentation props_MobileNode;
  private ConceptPresentation props_NationalTechnicalMeans;
  private ConceptPresentation props_OconusNode;
  private ConceptPresentation props_OperationsCenter;
  private ConceptPresentation props_Reconnaisance;
  private ConceptPresentation props_RegionalESD;
  private ConceptPresentation props_RegionalNOC;
  private ConceptPresentation props_RegionalSOC;
  private ConceptPresentation props_Rescue;
  private ConceptPresentation props_SoftwareFactory;
  private ConceptPresentation props_SpaceMissionSystem;
  private ConceptPresentation props_Spoke;
  private ConceptPresentation props_Transport;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ACE:
        if (props_ACE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("ACE");
          cpb.presentationByName();
          props_ACE = cpb.create();
        }
        return props_ACE;
      case LanguageConceptSwitch.AerialRefueling:
        if (props_AerialRefueling == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Aerial Refueling");
          cpb.presentationByName();
          props_AerialRefueling = cpb.create();
        }
        return props_AerialRefueling;
      case LanguageConceptSwitch.AirBase:
        if (props_AirBase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Air Base");
          cpb.presentationByName();
          props_AirBase = cpb.create();
        }
        return props_AirBase;
      case LanguageConceptSwitch.Bomber:
        if (props_Bomber == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Bomber");
          cpb.presentationByName();
          props_Bomber = cpb.create();
        }
        return props_Bomber;
      case LanguageConceptSwitch.CONUSNode:
        if (props_CONUSNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Node on CONUS");
          cpb.presentationByName();
          props_CONUSNode = cpb.create();
        }
        return props_CONUSNode;
      case LanguageConceptSwitch.CommandCenter:
        if (props_CommandCenter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Command Center");
          cpb.presentationByName();
          props_CommandCenter = cpb.create();
        }
        return props_CommandCenter;
      case LanguageConceptSwitch.DistributedSystemsIntegrationLab:
        if (props_DistributedSystemsIntegrationLab == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Distributed Systems Integration Lab");
          cpb.presentationByName();
          props_DistributedSystemsIntegrationLab = cpb.create();
        }
        return props_DistributedSystemsIntegrationLab;
      case LanguageConceptSwitch.Enterprise:
        if (props_Enterprise == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("SD_WAN Enterprise");
          cpb.presentationByName();
          props_Enterprise = cpb.create();
        }
        return props_Enterprise;
      case LanguageConceptSwitch.Fighter:
        if (props_Fighter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Fighter");
          cpb.presentationByName();
          props_Fighter = cpb.create();
        }
        return props_Fighter;
      case LanguageConceptSwitch.FixedNode:
        if (props_FixedNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Fixed Node");
          cpb.presentationByName();
          props_FixedNode = cpb.create();
        }
        return props_FixedNode;
      case LanguageConceptSwitch.ForwardOperatingLocation:
        if (props_ForwardOperatingLocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Forward Operating Location");
          cpb.presentationByName();
          props_ForwardOperatingLocation = cpb.create();
        }
        return props_ForwardOperatingLocation;
      case LanguageConceptSwitch.MobileNode:
        if (props_MobileNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Mobile Node");
          cpb.presentationByName();
          props_MobileNode = cpb.create();
        }
        return props_MobileNode;
      case LanguageConceptSwitch.NationalTechnicalMeans:
        if (props_NationalTechnicalMeans == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("NationalTechnicalMeans");
          cpb.presentationByName();
          props_NationalTechnicalMeans = cpb.create();
        }
        return props_NationalTechnicalMeans;
      case LanguageConceptSwitch.OconusNode:
        if (props_OconusNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("OCONUS Node");
          cpb.presentationByName();
          props_OconusNode = cpb.create();
        }
        return props_OconusNode;
      case LanguageConceptSwitch.OperationsCenter:
        if (props_OperationsCenter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Operations Center");
          cpb.presentationByName();
          props_OperationsCenter = cpb.create();
        }
        return props_OperationsCenter;
      case LanguageConceptSwitch.Reconnaisance:
        if (props_Reconnaisance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Reconnaisance");
          cpb.presentationByName();
          props_Reconnaisance = cpb.create();
        }
        return props_Reconnaisance;
      case LanguageConceptSwitch.RegionalESD:
        if (props_RegionalESD == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Regional ESD");
          cpb.presentationByName();
          props_RegionalESD = cpb.create();
        }
        return props_RegionalESD;
      case LanguageConceptSwitch.RegionalNOC:
        if (props_RegionalNOC == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Regional Network Operations Center");
          cpb.presentationByName();
          props_RegionalNOC = cpb.create();
        }
        return props_RegionalNOC;
      case LanguageConceptSwitch.RegionalSOC:
        if (props_RegionalSOC == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Regional SOC");
          cpb.presentationByName();
          props_RegionalSOC = cpb.create();
        }
        return props_RegionalSOC;
      case LanguageConceptSwitch.Rescue:
        if (props_Rescue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Rescue");
          cpb.presentationByName();
          props_Rescue = cpb.create();
        }
        return props_Rescue;
      case LanguageConceptSwitch.SoftwareFactory:
        if (props_SoftwareFactory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Software Factory");
          cpb.presentationByName();
          props_SoftwareFactory = cpb.create();
        }
        return props_SoftwareFactory;
      case LanguageConceptSwitch.SpaceMissionSystem:
        if (props_SpaceMissionSystem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("SpaceMissionSystem");
          cpb.presentationByName();
          props_SpaceMissionSystem = cpb.create();
        }
        return props_SpaceMissionSystem;
      case LanguageConceptSwitch.Spoke:
        if (props_Spoke == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Spoke");
          cpb.presentationByName();
          props_Spoke = cpb.create();
        }
        return props_Spoke;
      case LanguageConceptSwitch.Transport:
        if (props_Transport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Transport");
          cpb.presentationByName();
          props_Transport = cpb.create();
        }
        return props_Transport;
    }
    return null;
  }
}
